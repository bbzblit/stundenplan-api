/**
 *
 *  Appointment.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Appointment.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::school_classes;

const std::string Appointment::Cols::_id = "id";
const std::string Appointment::Cols::_appointment_start = "appointment_start";
const std::string Appointment::Cols::_appointment_end = "appointment_end";
const std::string Appointment::Cols::_title = "title";
const std::string Appointment::Cols::_place = "place";
const std::string Appointment::Cols::_summary = "summary";
const std::string Appointment::Cols::_class_id = "class_id";
const std::string Appointment::primaryKeyName = "id";
const bool Appointment::hasPrimaryKey = true;
const std::string Appointment::tableName = "appointment";

const std::vector<typename Appointment::MetaData> Appointment::metaData_={
{"id","int32_t","int",4,1,1,1},
{"appointment_start","::trantor::Date","timestamp",0,0,0,1},
{"appointment_end","::trantor::Date","timestamp",0,0,0,1},
{"title","std::string","varchar(255)",255,0,0,1},
{"place","std::string","varchar(255)",255,0,0,1},
{"summary","std::string","text",0,0,0,0},
{"class_id","int32_t","int",4,0,0,0}
};
const std::string &Appointment::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Appointment::Appointment(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["appointment_start"].isNull())
        {
            auto timeStr = r["appointment_start"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["appointment_end"].isNull())
        {
            auto timeStr = r["appointment_end"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["place"].isNull())
        {
            place_=std::make_shared<std::string>(r["place"].as<std::string>());
        }
        if(!r["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(r["summary"].as<std::string>());
        }
        if(!r["class_id"].isNull())
        {
            classId_=std::make_shared<int32_t>(r["class_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            place_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            summary_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            classId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Appointment::Appointment(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            place_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            summary_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            classId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

Appointment::Appointment(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("appointment_start"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["appointment_start"].isNull())
        {
            auto timeStr = pJson["appointment_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("appointment_end"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["appointment_end"].isNull())
        {
            auto timeStr = pJson["appointment_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("place"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["place"].isNull())
        {
            place_=std::make_shared<std::string>(pJson["place"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("class_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["class_id"].isNull())
        {
            classId_=std::make_shared<int32_t>((int32_t)pJson["class_id"].asInt64());
        }
    }
}

void Appointment::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            place_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            summary_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            classId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

void Appointment::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("appointment_start"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["appointment_start"].isNull())
        {
            auto timeStr = pJson["appointment_start"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentStart_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("appointment_end"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["appointment_end"].isNull())
        {
            auto timeStr = pJson["appointment_end"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                appointmentEnd_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("place"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["place"].isNull())
        {
            place_=std::make_shared<std::string>(pJson["place"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["summary"].isNull())
        {
            summary_=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("class_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["class_id"].isNull())
        {
            classId_=std::make_shared<int32_t>((int32_t)pJson["class_id"].asInt64());
        }
    }
}

const int32_t &Appointment::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Appointment::getId() const noexcept
{
    return id_;
}
void Appointment::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Appointment::PrimaryKeyType & Appointment::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Appointment::getValueOfAppointmentStart() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(appointmentStart_)
        return *appointmentStart_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Appointment::getAppointmentStart() const noexcept
{
    return appointmentStart_;
}
void Appointment::setAppointmentStart(const ::trantor::Date &pAppointmentStart) noexcept
{
    appointmentStart_ = std::make_shared<::trantor::Date>(pAppointmentStart);
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Appointment::getValueOfAppointmentEnd() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(appointmentEnd_)
        return *appointmentEnd_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Appointment::getAppointmentEnd() const noexcept
{
    return appointmentEnd_;
}
void Appointment::setAppointmentEnd(const ::trantor::Date &pAppointmentEnd) noexcept
{
    appointmentEnd_ = std::make_shared<::trantor::Date>(pAppointmentEnd);
    dirtyFlag_[2] = true;
}

const std::string &Appointment::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Appointment::getTitle() const noexcept
{
    return title_;
}
void Appointment::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[3] = true;
}
void Appointment::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[3] = true;
}

const std::string &Appointment::getValueOfPlace() const noexcept
{
    const static std::string defaultValue = std::string();
    if(place_)
        return *place_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Appointment::getPlace() const noexcept
{
    return place_;
}
void Appointment::setPlace(const std::string &pPlace) noexcept
{
    place_ = std::make_shared<std::string>(pPlace);
    dirtyFlag_[4] = true;
}
void Appointment::setPlace(std::string &&pPlace) noexcept
{
    place_ = std::make_shared<std::string>(std::move(pPlace));
    dirtyFlag_[4] = true;
}

const std::string &Appointment::getValueOfSummary() const noexcept
{
    const static std::string defaultValue = std::string();
    if(summary_)
        return *summary_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Appointment::getSummary() const noexcept
{
    return summary_;
}
void Appointment::setSummary(const std::string &pSummary) noexcept
{
    summary_ = std::make_shared<std::string>(pSummary);
    dirtyFlag_[5] = true;
}
void Appointment::setSummary(std::string &&pSummary) noexcept
{
    summary_ = std::make_shared<std::string>(std::move(pSummary));
    dirtyFlag_[5] = true;
}
void Appointment::setSummaryToNull() noexcept
{
    summary_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Appointment::getValueOfClassId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(classId_)
        return *classId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Appointment::getClassId() const noexcept
{
    return classId_;
}
void Appointment::setClassId(const int32_t &pClassId) noexcept
{
    classId_ = std::make_shared<int32_t>(pClassId);
    dirtyFlag_[6] = true;
}
void Appointment::setClassIdToNull() noexcept
{
    classId_.reset();
    dirtyFlag_[6] = true;
}

void Appointment::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Appointment::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "appointment_start",
        "appointment_end",
        "title",
        "place",
        "summary",
        "class_id"
    };
    return inCols;
}

void Appointment::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAppointmentStart())
        {
            binder << getValueOfAppointmentStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAppointmentEnd())
        {
            binder << getValueOfAppointmentEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPlace())
        {
            binder << getValueOfPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getClassId())
        {
            binder << getValueOfClassId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Appointment::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Appointment::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAppointmentStart())
        {
            binder << getValueOfAppointmentStart();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAppointmentEnd())
        {
            binder << getValueOfAppointmentEnd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPlace())
        {
            binder << getValueOfPlace();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getClassId())
        {
            binder << getValueOfClassId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Appointment::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAppointmentStart())
    {
        ret["appointment_start"]=getAppointmentStart()->toDbStringLocal();
    }
    else
    {
        ret["appointment_start"]=Json::Value();
    }
    if(getAppointmentEnd())
    {
        ret["appointment_end"]=getAppointmentEnd()->toDbStringLocal();
    }
    else
    {
        ret["appointment_end"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getPlace())
    {
        ret["place"]=getValueOfPlace();
    }
    else
    {
        ret["place"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getClassId())
    {
        ret["class_id"]=getValueOfClassId();
    }
    else
    {
        ret["class_id"]=Json::Value();
    }
    return ret;
}

Json::Value Appointment::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAppointmentStart())
            {
                ret[pMasqueradingVector[1]]=getAppointmentStart()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAppointmentEnd())
            {
                ret[pMasqueradingVector[2]]=getAppointmentEnd()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[3]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPlace())
            {
                ret[pMasqueradingVector[4]]=getValueOfPlace();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSummary())
            {
                ret[pMasqueradingVector[5]]=getValueOfSummary();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getClassId())
            {
                ret[pMasqueradingVector[6]]=getValueOfClassId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAppointmentStart())
    {
        ret["appointment_start"]=getAppointmentStart()->toDbStringLocal();
    }
    else
    {
        ret["appointment_start"]=Json::Value();
    }
    if(getAppointmentEnd())
    {
        ret["appointment_end"]=getAppointmentEnd()->toDbStringLocal();
    }
    else
    {
        ret["appointment_end"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getPlace())
    {
        ret["place"]=getValueOfPlace();
    }
    else
    {
        ret["place"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getClassId())
    {
        ret["class_id"]=getValueOfClassId();
    }
    else
    {
        ret["class_id"]=Json::Value();
    }
    return ret;
}

bool Appointment::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("appointment_start"))
    {
        if(!validJsonOfField(1, "appointment_start", pJson["appointment_start"], err, true))
            return false;
    }
    else
    {
        err="The appointment_start column cannot be null";
        return false;
    }
    if(pJson.isMember("appointment_end"))
    {
        if(!validJsonOfField(2, "appointment_end", pJson["appointment_end"], err, true))
            return false;
    }
    else
    {
        err="The appointment_end column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(3, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("place"))
    {
        if(!validJsonOfField(4, "place", pJson["place"], err, true))
            return false;
    }
    else
    {
        err="The place column cannot be null";
        return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(5, "summary", pJson["summary"], err, true))
            return false;
    }
    if(pJson.isMember("class_id"))
    {
        if(!validJsonOfField(6, "class_id", pJson["class_id"], err, true))
            return false;
    }
    return true;
}
bool Appointment::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Appointment::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("appointment_start"))
    {
        if(!validJsonOfField(1, "appointment_start", pJson["appointment_start"], err, false))
            return false;
    }
    if(pJson.isMember("appointment_end"))
    {
        if(!validJsonOfField(2, "appointment_end", pJson["appointment_end"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(3, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("place"))
    {
        if(!validJsonOfField(4, "place", pJson["place"], err, false))
            return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(5, "summary", pJson["summary"], err, false))
            return false;
    }
    if(pJson.isMember("class_id"))
    {
        if(!validJsonOfField(6, "class_id", pJson["class_id"], err, false))
            return false;
    }
    return true;
}
bool Appointment::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Appointment::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
